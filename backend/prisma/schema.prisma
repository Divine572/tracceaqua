// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  walletAddress String?   @unique @map("wallet_address") @db.VarChar(42)
  googleId      String?   @unique @map("google_id")
  email         String?   @unique
  name          String?
  avatarUrl     String?   @map("avatar_url")
  roleId        String    @default("consumer") @map("role_id") @db.VarChar(50)
  isVerified    Boolean   @default(false) @map("is_verified")
  isActive      Boolean   @default(true) @map("is_active")
  metadata      Json      @default("{}")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at")
  lastLoginAt   DateTime? @map("last_login_at")

  sessions     UserSession[]
  activityLogs UserActivityLog[]

  @@map("users")
}

model UserSession {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String   @map("user_id") @db.Uuid
  sessionToken  String   @unique @map("session_token")
  walletAddress String?  @map("wallet_address") @db.VarChar(42)
  ipAddress     String?  @map("ip_address")
  userAgent     String?  @map("user_agent")
  expiresAt     DateTime @map("expires_at")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model UserActivityLog {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String?  @map("user_id") @db.Uuid
  action     String   @db.VarChar(100)
  resource   String   @db.VarChar(100)
  resourceId String?  @map("resource_id")
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")
  metadata   Json     @default("{}")
  createdAt  DateTime @default(now()) @map("created_at")

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("user_activity_logs")
}
